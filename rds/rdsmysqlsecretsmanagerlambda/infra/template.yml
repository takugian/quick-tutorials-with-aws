AWSTemplateFormatVersion: 2010-09-09

Description: Creates a Secret, a VPC Endpoint, a RDS MySQL instance and a Lambda function to consume it

Parameters:
  VpcId:
    Type: String

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

  SecurityGroupId:
    Type: String

  DBInstanceID:
    Type: String
    Default: dbinstance

  DBName:
    Type: String
    Default: awsquickstartdatabase

  DBInstanceClass:
    Type: String
    Default: db.t2.micro

  ApiName:
    Type: String
    Default: RDSLambda

  BucketLambdaSourceCode:
    Type: String
    Default: tg-quicklabs-lambdasrc

  BucketKeyLambdaSourceCode:
    Type: String
    Default: RDSLambda.zip

  Owner:
    Type: String
    Default: tg

Resources:
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub ${DBName}Secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  SecretVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-east-2.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref VpcId
      SecurityGroupIds:
        - !Ref SecurityGroupId
      SubnetIds:
        - !Ref SubnetId1
        - !Ref SubnetId2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${DBName}DBSubnetGroup
      SubnetIds:
        - !Ref SubnetId1
        - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  DBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${DBName}SecurityGroup
      GroupDescription: !Sub ${DBName}SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupId

  DBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: RDSSecret
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: 8.0.16
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref RDSSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref RDSSecret,
            ":SecretString:password}}",
          ],
        ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DBInstanceSecurityGroup.GroupId
      AllocatedStorage: 50
      Tags:
        - Key: Owner
          Value: !Ref Owner

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref DBInstance
      TargetType: AWS::RDS::DBInstance

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApiName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${ApiName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Ref ApiName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        S3Bucket: !Ref BucketLambdaSourceCode
        S3Key: !Ref BucketKeyLambdaSourceCode
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2
      Environment:
        Variables:
          SECRET_NAME: !Ref RDSSecret
      Tags:
        - Key: Owner
          Value: !Ref Owner
