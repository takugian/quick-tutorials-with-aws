AWSTemplateFormatVersion: 2010-09-09

Description: Creates an ECS App using NodeJS and Fargate

Parameters:
  ClusterName:
    Type: String
    Default: fargateecscluster

  ServiceName:
    Type: String
    Default: ecsappnode

  VpcId:
    Type: String

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

  ExposedPortInDockerFile:
    Type: String
    Default: 3070

  Owner:
    Type: String
    Default: tg

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${ServiceName}
      RetentionInDays: 7

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      Tags:
        - Key: Owner
          Value: !Ref Owner

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}ExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ServiceName}ExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}TaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ServiceName}TaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub Sg${ServiceName}
      GroupDescription: !Sub Sg${ServiceName}
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ExposedPortInDockerFile
          ToPort: !Ref ExposedPortInDockerFile
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Owner
          Value: !Ref Owner

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CloudWatchLogGroup
    Properties:
      Family: !Sub family-${ServiceName}
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}:v1
          MemoryReservation: 256
          HealthCheck:
            Command:
              [
                "CMD-SHELL",
                "curl -f http://localhost:3070/healthcheck || exit 1",
              ]
            Interval: 30
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: !Ref ExposedPortInDockerFile
      Tags:
        - Key: Owner
          Value: !Ref Owner

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: !Sub service-${ServiceName}
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # If subnets are public
          # AssignPublicIp: DISABLED # If subnets are private
          Subnets:
            - !Ref SubnetId1
            - !Ref SubnetId2
          SecurityGroups:
            - !GetAtt ServiceSecurityGroup.GroupId
      Tags:
        - Key: Owner
          Value: !Ref Owner
