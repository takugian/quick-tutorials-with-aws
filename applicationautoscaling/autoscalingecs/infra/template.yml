AWSTemplateFormatVersion: 2010-09-09

Description: Creates an Auto Scaling for an ECS task

Parameters:
  ECSClusterName:
    Type: String
    Default: fargateecscluster

  ServiceName:
    Type: String
    Default: service-ecsappjava

  ScalingRoleArn:
    Type: String
  
  ScheduleExpression:
    Type: String
    Default: at(2022-12-20T17:42:00)

  ScheduledMaxCapacity:
    Type: Number
    Default: 6

  ScheduledMinCapacity:
    Type: Number
    Default: 3

  MaxCapacity:
    Type: Number
    Default: 4

  MinCapacity:
    Type: Number
    Default: 2

  TargetValue:
    Type: Number
    Default: 70

  ScaleInCooldown:
    Type: Number
    Default: 60

  ScaleOutCooldown:
    Type: Number
    Default: 60

  Owner:
    Type: String
    Default: tg

Resources:
  # ScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${ServiceName}ScalingRole
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - application-autoscaling.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #       - PolicyName: !Sub ${ServiceName}Policy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:DescribeServices
  #                 - ecs:UpdateService
  #                 - cloudwatch:PutMetricAlarm
  #                 - cloudwatch:DescribeAlarms
  #                 - cloudwatch:GetMetricStatistics
  #                 - cloudwatch:SetAlarmState
  #                 - cloudwatch:DeleteAlarms
  #               Resource: "*"

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      ResourceId: !Sub service/${ECSClusterName}/${ServiceName}
      ScalableDimension: ecs:service:DesiredCount
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      # If you run create-service-linked-role
      RoleARN: !Ref ScalingRoleArn
      # RoleARN: !GetAtt ScalingRole.Arn
      ScheduledActions:
        - ScheduledActionName: ScheduledActionName
          Schedule: !Ref ScheduleExpression
          # StartTime: Timestamp
          # EndTime: Timestamp
          Timezone: America/Sao_Paulo
          ScalableTargetAction:
            MaxCapacity: !Ref ScheduledMaxCapacity
            MinCapacity: !Ref ScheduledMinCapacity

  ScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}ScalingPolicyCPU
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetValue
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}ScalingPolicyMemory
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetValue
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
