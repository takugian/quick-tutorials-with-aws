AWSTemplateFormatVersion: 2010-09-09

Description: Creates a CloudTrail for a Lambda function

Parameters:
  UseCaseName:
    Type: String
    Default: cloudtraillambda

  CloudTrailName:
    Type: String
    Default: cloudtraillambda-trail

  LogBucketName:
    Type: String

  SnsTopicName:
    Type: String

  # KMSKeyId:
  #   Type: String

  Owner:
    Type: String
    Default: tg

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${UseCaseName}LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${UseCaseName}LambdaExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  CloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${UseCaseName}CloudTrailRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${UseCaseName}CloudTrailRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Sub ${UseCaseName}Function
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('event', JSON.stringify(event));
            if (event.routeKey == "GET /customers") {
              let response =  [ { "customer_id": "bdd6a8bb-d195-419c-a20b-aa3cb8bd747b", "customer_name": "EDWARD ELRIC" } ];
              console.log('response', response);
              context.succeed(response);
            } else {
               console.error('routeKey invalid');
              context.fail("routeKey invalid");
            }
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudtrail/${UseCaseName}
      RetentionInDays: 7

  Trail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Ref CloudTrailName
      EventSelectors:
        - DataResources:
            - Type: AWS::Lambda::Function
              Values:
                # - arn:aws:lambda
                - !GetAtt Lambda.Arn
          # ExcludeManagementEventSources:
          #   - String
          IncludeManagementEvents: true
          ReadWriteType: All
      IncludeGlobalServiceEvents: false
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      CloudWatchLogsLogGroupArn: !GetAtt CloudWatchLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn
      EnableLogFileValidation: false
      IsLogging: true
      IsMultiRegionTrail: false
      IsOrganizationTrail: false
      # KMSKeyId: !Ref KMSKeyId
      S3BucketName: !Ref LogBucketName
      # S3KeyPrefix: 
      SnsTopicName: !Ref SnsTopicName
      Tags:
        - Key: Owner
          Value: !Ref Owner
