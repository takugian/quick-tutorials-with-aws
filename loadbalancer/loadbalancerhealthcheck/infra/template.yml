AWSTemplateFormatVersion: 2010-09-09

Description: Creates an Application Load Balancer with health check enabled

Parameters:
  FunctionName:
    Type: String
    Default: LoadBalancerWithHealthCheck

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

  Owner:
    Type: String
    Default: tg

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${FunctionName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${FunctionName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('event', JSON.stringify(event));
            const response = {
              "isBase64Encoded": false,
              "statusCode": 200,
              "statusDescription": "200 OK",
              "headers": {
                  "Set-cookie": "cookies",
                  "Content-Type": "application/json"
              },
              "body": "Hello from Lambda (optional)"
            };
            return response;
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub Lb${FunctionName}
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub LbTg${FunctionName}
      TargetType: lambda
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: "/"
      # HealthCheckPort
      # HealthCheckProtocol
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      Targets:
        - Id: !GetAtt Lambda.Arn
      Tags:
        - Key: Owner
          Value: !Ref Owner
