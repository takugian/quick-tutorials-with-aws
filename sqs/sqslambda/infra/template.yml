AWSTemplateFormatVersion: 2010-09-09

Description: Creates a SQS Queue, a Lambda producer and a Lambda consumer

Parameters:
  QueueName:
    Type: String
    Default: Queue

  LambdaProducerName:
    Type: String
    Default: SQSLambdaProducer

  LambdaConsumerName:
    Type: String
    Default: SQSLambdaConsumer

  VpcId:
    Type: String

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

  RouteTableId1:
    Type: String

  RouteTableId2:
    Type: String

  SecurityGroupId:
    Type: String

  Owner:
    Type: String
    Default: tg

Resources:

  VPCEndpointSQS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-east-2.sqs
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      RouteTableIds:
        - !Ref RouteTableId1
        - !Ref RouteTableId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      DelaySeconds: 0
      MessageRetentionPeriod: 300
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaProducerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaProducerName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${LambdaProducerName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${QueueName}

  LambdaProducer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaProducerName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaProducerExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          AWS.config.update({ region: "us-east-2" });
          const sqs = new AWS.SQS({ apiVersion: '2012-11-05' });
          exports.handler = async (event, context) => {
              let response = { statusCode: 200, headers: { "Content-Type": "application/json" }, body: null };
              try {
                  const params = {
                      QueueUrl: event.QueueUrl,
                      MessageBody: event.MessageBody
                  };
                  console.log(`Sending message to ${JSON.stringify(params)}`);
                  var result = await sqs.sendMessage(params).promise();
                  console.log(`Message has sent ${JSON.stringify(result)}`);
              } catch (err) {
                  console.log(err);
                  response.statusCode = 400;
                  response.body = JSON.stringify(err.message);
              }
              return response;
          };
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaConsumerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaConsumerName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${LambdaConsumerName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${QueueName}

  LambdaConsumer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaConsumerName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaConsumerExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const sqs = new AWS.SQS({ apiVersion: '2012-11-05' });
          exports.handler = async (event, context) => {
              console.log(`Event ${JSON.stringify(event)}`);
              console.log(`Message was received`);
              return { statusCode: 200, body: null };
          };
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt Queue.Arn
      # FilterCriteria: Json
      FunctionName: !Ref LambdaConsumerName
