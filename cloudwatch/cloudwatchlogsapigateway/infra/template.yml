AWSTemplateFormatVersion: 2010-09-09

Description: Creates a CloudWatch Logs for an API Gateway

Parameters:
  ApiName:
    Type: String
    Default: CloudWatchLogsApiGateway

  StageName:
    Type: String
    Default: dev

  Owner:
    Type: String
    Default: tg

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApiName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${ApiName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Ref ApiName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('event', JSON.stringify(event));
            const resource = `${event.httpMethod} ${event.path}`;
            if (resource == "GET /customers") {
              context.succeed( [ { "customer_id": "1", "customer_name": "EDWARD ELRIC" } ]);
            } else {
              context.fail("routeKey invalid");
            }
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Lambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApiName}ApiGatewayRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    DependsOn: Lambda
    Properties:
      Name: !Ref ApiName
      Description: !Ref ApiName
      Tags:
        - Key: Owner
          Value: !Ref Owner

  CustomerResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: customers

  MethodGetCustomers:
    Type: AWS::ApiGateway::Method
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CustomerResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 500
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
        RequestTemplates:
          application/json: '{ "httpMethod": "$context.httpMethod", "path": "/customers" }'

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MethodGetCustomers
    Properties:
      RestApiId: !Ref RestApi

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${ApiName}
      RetentionInDays: 7

  Stage:
    Type: AWS::ApiGateway::Stage
    DependsOn: Deployment
    Properties:
      StageName: !Ref StageName
      Description: !Ref StageName
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment
      AccessLogSetting:
        DestinationArn: !GetAtt CloudWatchLogGroup.Arn
        Format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"routeKey\":\"$context.routeKey\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\" }'
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: INFO
      Tags:
        - Key: Owner
          Value: !Ref Owner
