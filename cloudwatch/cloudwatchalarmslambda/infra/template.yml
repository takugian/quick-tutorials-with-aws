AWSTemplateFormatVersion: 2010-09-09

Description: Creates a CloudWatch Alarms for a Lambda function

Parameters:
  FunctionName:
    Type: String
    Default: CloudWatchAlarmsLambda

  # AlarmEmail:
  #   Type: String

  Owner:
    Type: String
    Default: tg

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${FunctionName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${FunctionName}LogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: ExecutionRole
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: nodejs14.x
      ReservedConcurrentExecutions: 2
      Role: !GetAtt ExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('Running CloudWatch Alarms');
            context.succeed("Hello, Running CloudWatch Alarms!");
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  # Topic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     TopicName: !Sub ${FunctionName}Topic
  #     Subscription:
  #       - Endpoint: !Ref AlarmEmail
  #         Protocol: email
  #     Tags:
  #       - Key: Owner
  #         Value: !Ref Owner

  ConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ConcurrentExecutions${FunctionName}
      AlarmDescription: !Sub ConcurrentExecutions${FunctionName}
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      # AlarmActions:
      #   - !GetAtt Topic.TopicArn
      # OKActions
      # InsufficientDataActions

  DurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Duration${FunctionName}
      AlarmDescription: !Sub Duration${FunctionName}
      Namespace: AWS/Lambda
      MetricName: Duration
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      # AlarmActions:
      #   - !GetAtt Topic.TopicArn
      # OKActions
      # InsufficientDataActions

  ThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Throttles${FunctionName}
      AlarmDescription: !Sub Throttles${FunctionName}
      Namespace: AWS/Lambda
      MetricName: Throttles
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      Statistic: SampleCount
      Period: 60
      EvaluationPeriods: 2
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      # AlarmActions:
      #   - !GetAtt Topic.TopicArn
      # OKActions
      # InsufficientDataActions

  InvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Invocations${FunctionName}
      AlarmDescription: !Sub Invocations${FunctionName}
      Namespace: AWS/Lambda
      MetricName: Invocations
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      Statistic: SampleCount
      Period: 60
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      # AlarmActions:
      #   - !GetAtt Topic.TopicArn
      # OKActions
      # InsufficientDataActions

  ErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Errors${FunctionName}
      AlarmDescription: !Sub Errors${FunctionName}
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      # AlarmActions:
      #   - !GetAtt Topic.TopicArn
      # OKActions
      # InsufficientDataActions
