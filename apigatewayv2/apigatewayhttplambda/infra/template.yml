AWSTemplateFormatVersion: 2010-09-09

Description: Creates a REST API Gateway integrated to a Lambda function

Parameters:
  ApiName:
    Type: String
    Default: ApiGatewayHttpLambda

  StageName:
    Type: String
    Default: dev

  Owner:
    Type: String
    Default: tg

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApiName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${ApiName}ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Ref ApiName
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('event', JSON.stringify(event));
            if (event.routeKey == "GET /customers") {
              context.succeed( [ { "customer_id": "bdd6a8bb-d195-419c-a20b-aa3cb8bd747b", "customer_name": "EDWARD ELRIC" } ]);
            } else {
              context.fail("routeKey invalid");
            }
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Lambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ApiName
      Description: !Ref ApiName
      Version: 1
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - Date
          - x-api-id
        MaxAge: 300
      DisableExecuteApiEndpoint: false

  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      Description: !Ref ApiName
      ConnectionType: INTERNET
      # ConnectionId: !Ref ConnectionId The ID of the VPC link for a private integration when ConnectionType equals to VPC_LINK
      IntegrationType: AWS_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !GetAtt Lambda.Arn
      PayloadFormatVersion: 2.0
      TimeoutInMillis: 30000

  Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: "GET /customers"
      Target: !Join ["/", [integrations, !Ref Integration]]

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn: [Api, Route]
    Properties:
      ApiId: !Ref Api

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn: [Integration, Route, Deployment]
    Properties:
      StageName: !Ref StageName
      Description: !Ref StageName
      ApiId: !Ref Api
      AutoDeploy: false
      DeploymentId: !Ref Deployment
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10

Outputs:
  ApiGatewayId:
    Value: !Ref Api
