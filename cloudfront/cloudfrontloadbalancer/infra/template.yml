AWSTemplateFormatVersion: 2010-09-09

Description: Creates a CloudFront distribution in front if an Application Load Balancer

Parameters:
  QuickStartName:
    Type: String
    Default: CloudFrontLoadBalancer

  VpcId:
    Type: String
    Default: vpc-0d1b84f8a177dcfe7

  SubnetId1:
    Type: String
    Default: subnet-0c7d6a7e645723d38

  SubnetId2:
    Type: String
    Default: subnet-03f5af28ac6350b5c

  SecurityGroupId:
    Type: String
    Default: sg-0487cc44f61202398

  Owner:
    Type: String
    Default: tg

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${QuickStartName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${QuickStartName}Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"

  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${QuickStartName}SgLambda
      GroupDescription: !Sub ${QuickStartName}SgLambda
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${QuickStartName}Function
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            console.log('event', JSON.stringify(event));
            let response = {
              statusCode: 200,
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify("OK"),
            };
            return response;
          };
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LoadBalancerSecurityGroup.GroupId
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: elasticloadbalancing.amazonaws.com

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${QuickStartName}SgLB
      GroupDescription: !Sub ${QuickStartName}SgLB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${QuickStartName}LB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${QuickStartName}TG
      TargetType: lambda
      HealthCheckEnabled: false
      Targets:
        - Id: !GetAtt LambdaFunction.Arn
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 403

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values:
              - random-value-1234567890
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  Distribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: LoadBalancerListener
    Properties:
      DistributionConfig:
        Comment: !Sub ${QuickStartName}Distribution
        Origins:
          - Id: !Sub ${QuickStartName}Origin
            DomainName: !GetAtt LoadBalancer.DNSName
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              OriginKeepaliveTimeout: 5
              OriginReadTimeout: 30
            OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: random-value-1234567890
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${QuickStartName}Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          AllowedMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: allow-all
        Enabled: true
      Tags:
        - Key: Owner
          Value: !Ref Owner

Outputs:
  DomainName:
    Value: !GetAtt Distribution.DomainName
