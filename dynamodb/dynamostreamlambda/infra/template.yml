AWSTemplateFormatVersion: 2010-09-09

Description: Creates a DynamoDB Stream integrated with a Lambda function

Parameters:

  StreamViewType:
    Type: String
    Default: NEW_IMAGE
    AllowedValues:
      - KEYS_ONLY  
      - NEW_IMAGE 
      - OLD_IMAGE
      - NEW_AND_OLD_IMAGES

  Owner:
    Type: String
    Default: tg

Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Customer
      AttributeDefinitions:
        - AttributeName: customer_number
          AttributeType: S
      KeySchema:
        - AttributeName: customer_number
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: !Ref StreamViewType
      Tags:
        - Key: Owner
          Value: !Ref Owner

  LambdaConsumerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaConsumeDynamoTableExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaConsumeDynamoTableLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"

        - PolicyName: LambdaConsumeDynamoTableDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !Sub "arn:aws:dynamodb:*:*:table/Customer/stream/*"

  LambdaConsumer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaConsumeDynamoTable
      Runtime: nodejs14.x
      Role: !GetAtt LambdaConsumerExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
              console.log(`Event received: ${JSON.stringify(event)}`);
              return { statusCode: 200, body: JSON.stringify("OK"), };
          };
      Tags:
        - Key: Owner
          Value: !Ref Owner

  DynamoDBEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:           
      EventSourceArn: !GetAtt Table.StreamArn
      FunctionName: !GetAtt LambdaConsumer.Arn
      FilterCriteria:
        Filters:
          - Pattern: "{ \"dynamodb\": { \"Keys\": { \"customer_number\": { \"S\": [ \"123456789\" ] } } } }"
          - Pattern: "{ \"dynamodb\": { \"NewImage\": { \"customer_country_birth\": { \"S\": [ \"BRAZIL\" ] } } } }"
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 5
      StartingPosition: LATEST
      Enabled: true
